{"version":3,"sources":["Components/Pages/StartPage.js","Components/Pages/Time.js","Components/Pages/WeatherCard.js","Components/Pages/Weather.js","App.js","Components/routes.js","reportWebVitals.js","index.js"],"names":["StartPage","className","style","textAlign","fontSize","Time","props","state","time","Date","toLocaleTimeString","this","intervalID","setInterval","tick","clearInterval","setState","Component","WeaterCard","Math","round","weather","src","alt","Weather","useState","town","setTown","setWeather","getWeather","a","fetch","method","response","json","data1","str","slice","indexOf","length","data2","console","log","margin","type","onChange","event","target","value","onClick","App","routes","path","exact","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.717a87ea.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction StartPage() {\r\n    return(\r\n        <div className='container'>\r\n            <div className='content-time'>\r\n                <h1 style={{textAlign: 'center', fontSize: '40px'}}>\r\n                    Добро пожаловать на наш сайт!<br/>\r\n                    Здесь вы можете узнать точное время и проверить погоду в Вашем городе!\r\n                </h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StartPage","import React, { Component } from 'react'\r\n\r\nclass Time extends Component { \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          time: new Date().toLocaleTimeString(),\r\n        };\r\n      }\r\n      componentDidMount() {\r\n        this.intervalID = setInterval(() => this.tick(), 1000);\r\n      }\r\n      componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n      }\r\n      tick() {\r\n        this.setState({\r\n          time: new Date().toLocaleTimeString(),\r\n        });\r\n      }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div className='container'>\r\n                <div className='content-time'>\r\n                  <h1 style={{fontSize: '50px'}}>ВРЕМЯ</h1>\r\n                  <h1 style={{fontSize:'70px'}}>Сейчас: {this.state.time}</h1>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Time","import React from 'react'\r\n\r\nexport const WeaterCard = (props) => {\r\n    return(\r\n        <div className='weather-card'>\r\n            <div className='weather-text'>\r\n                <h2>{Math.round(props.weather['main']['temp']-273) + '°C'}</h2>\r\n                <h3>{props.weather['weather'][0]['description']}</h3>\r\n            </div>\r\n            <img src={'https://openweathermap.org/img/wn/'+props.weather['weather'][0]['icon']+'@2x.png'} alt='weather-icon'></img>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { WeaterCard } from './WeatherCard';\r\n\r\nfunction Weather() {\r\n    const [town, setTown] = useState('Самара');\r\n    const [weather, setWeather] = useState([])\r\n    const pathGeo = 'https://geocode-maps.yandex.ru/1.x/?apikey=a6ef40b3-8153-4db2-bad9-af4f931b44b8&format=json&geocode='\r\n    const pathWeather = 'https://api.openweathermap.org/data/2.5/weather?'\r\n    const weatherKey = '&appid=2a1e0fce5a6566ac4963cd9959ab869b&lang=ru'\r\n\r\n    const changeHandler = (event) => {\r\n        setTown(event.target.value)\r\n    }\r\n\r\n    const getRightPosit = (str) => {\r\n        let posit = 'lat=' + str.slice(str.indexOf(' ')+1, str.length) + '&lon=' + str.slice(0, str.indexOf(' '))\r\n        return posit\r\n    }\r\n\r\n    const getWeather = async () => {\r\n        try {\r\n            let response = await fetch(pathGeo+town,{method: 'GET'})\r\n            const data1 = await response.json()\r\n            response = await fetch(pathWeather + getRightPosit(data1['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['Point']['pos'])+weatherKey,{method: 'GET'})\r\n            const data2 = await response.json()\r\n            setWeather(data2)\r\n            console.log(data2)\r\n        } catch(error) {\r\n            console.log('Причина ошибки: ' + error);\r\n        }\r\n    }\r\n\r\n\r\n    return(\r\n        <div className='container'>\r\n            <div className='content'>\r\n                <h1 style={{textAlign: 'center', fontSize: '50px', margin: '0'}}>\r\n                    ПОГОДА\r\n                </h1>\r\n                <div className='form'>\r\n                    <p  style={{textAlign: 'center', fontSize: '30px'}}>Введите свой город:</p>\r\n                    <input className='town' type='text' onChange={changeHandler} value={town}/>\r\n                    <input className='town-btn' type='submit' onClick={getWeather} value='Отправить'/>\r\n                </div>\r\n                <div className='weather-block'>\r\n                    {weather.length===0? '': <WeaterCard weather={weather}/>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n//Math.round(weather['main']['temp']-273) + '°C'\r\nexport default Weather","import {BrowserRouter as Router, NavLink} from 'react-router-dom'\nimport {useRoutes} from './Components/routes'\n\nfunction App() {\n  const routes = useRoutes()\n\n  return (\n    <div>\n      <Router>\n      <header>\n        <div className='links'>\n          <NavLink className='nav-btn' to=\"/weather-data/time\">Время</NavLink>\n          <NavLink className='nav-btn' to=\"/weather-data/weather\">Погода</NavLink>\n        </div>\n      </header>\n        {routes}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\r\nimport { Redirect, Route, Switch } from 'react-router'\r\nimport StartPage from './Pages/StartPage'\r\nimport Time from './Pages/Time'\r\nimport Weather from './Pages/Weather'\r\n\r\nexport const useRoutes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/weather-data\" exact>\r\n                <StartPage/>\r\n            </Route>\r\n            <Route path=\"/weather-data/time\" exact>\r\n                <Time/>\r\n            </Route>\r\n            <Route path=\"/weather-data/weather\" exact>\r\n                <Weather/>\r\n            </Route>\r\n            <Redirect to=\"/weather-data\"/>\r\n        </Switch>\r\n    )\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}